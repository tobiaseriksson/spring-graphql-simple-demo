type SupportCase {
    id: ID!
    priority: String!
    title: String!
    text: String!
    logMessages(limit:Int): [LogMessage]
    email: Email
    createdDate: String
    createdBy: User
    status: String
}

type User {
    id: ID!
    firstname: String
    lastname: String
    homeAddress: Address
    email: Email
    supportCases(limit:Int): [SupportCase]
}

type Address {
    id: ID!
    country: String
    city: String
    postalCode: String
    street: String
}

scalar Email

type LogMessage {
    id: ID!
    createdDate: String
    createdBy: User
    txt: String
}

input LogMessageInput {
    txt: String
    belongToCase: ID!
    createdBy: ID!
}

input SupportCaseInput {
    priority: String!
    title: String!
    text: String!
    email: Email!
    createdBy: ID!
}

type Query {
    user(id:ID!):User
    allUsers(limit:Int):[User]
    # Returns SupportCase with id
    supportCase( id: ID! ): SupportCase
    # This will return ALL the Support Cases there are
    allSupportCases: [SupportCase]
    # This will return a subset of the Support Cases based on title contains
    # and/or the limit parameter
    someSupportCases( titleContains: String, limit: Int): [SupportCase]
}


interface DemoResponse {
    message: String
}
type Success implements DemoResponse {
    message: String
}

type Failure implements DemoResponse {
    message: String
    errorCode: Int
}

type Mutation {
    # Add a Log Message to a particular Support Case
    addLogMessage( logMessage: LogMessageInput! ) : DemoResponse
    addSupportCase( case: SupportCaseInput! ) : SupportCase
}
